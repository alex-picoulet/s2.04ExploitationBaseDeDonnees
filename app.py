# -*- coding: utf-8 -*-
"""
Created on Tue Apr 25 11:22:08 2023

@author: apsonder
"""

import pyodbc
from colorama import init, Fore, Style
import os
import matplotlib.pyplot as plt

# Initialisation de colorama
init()

conn=pyodbc.connect('DSN=BD_Picoulet_Lakartxela')

cursor = conn.cursor()



def messageBienvenue():
    # Effacer la console
    os.system('cls' if os.name == 'nt' else 'clear')
    # initialise la couleur en vert
    print(Fore.GREEN + "----------------------------------------------------------------------------------------" + Style.RESET_ALL)
    print(Fore.GREEN + "-----------------------------BIENVENUE SUR NOTRE APPLICATION----------------------------" + Style.RESET_ALL)
    print(Fore.GREEN + "----------------------------------------------------------------------------------------\n" + Style.RESET_ALL)
    # réinitialise la couleur de la console à sa valeur par défaut après l'avoir mit en vert

def requetes():
    print(Fore.GREEN + "Veuillez choisir une requête parmi les suivantes :\n"+ Style.RESET_ALL)

    print("1. Le nombre de visites selon leur origine géographiques.\n")

    print("2. Le top de la première action fait en principal selon l’origine.\n")

    print("3. La moyenne du nombre d’actions effectués par visite sur le site selon leur origine.\n")

    print(Fore.RED + "4. Quitter le programme\n" + Style.RESET_ALL)

def erreurSaisie():
    print(Fore.RED + "Erreur de saisie!!!" + Style.RESET_ALL)


messageBienvenue()
requetes()
# Boucle principale
while True:
    
    saisie = input("Entrez la requête que vous souhaitez traiter : (1) (2) ... (4) : ")
    
    # cas si l'utilisateur souhaite quitter l'application
    if saisie == "4":
        # Effacer la console
        os.system('cls' if os.name == 'nt' else 'clear')
        # Quitte la fenêtre
        exit()
    
    
    
    # REQUETE NUMERO 1
    if saisie == "1":
        # Effacer la console
        os.system('cls' if os.name == 'nt' else 'clear')
        
        # Affiche la requete en vert
        print(Fore.GREEN + "1. Le nombre de visites selon leur origine géographiques.\n" + Style.RESET_ALL)
        
        # saisie de la région avec une seule lettre pour faciliter/accelerer la saisie, vu que toute les regions commencent par une lettre differente nous avons pu nous permettre cela
        filter = input("\nDe quelle région voulez vous afficher le nombre de visite ?\nEntrez la première lettre de la région (Espagne - Autre région = (E) / France = (F) / Autre pays = (A) / Comunidad de Madrid = (C)) : ")
        
        # si mauvaise saisie donc message d'erreur de saisie et on passe tout le reste
        if filter not in ['E', 'F', 'A', 'C', 'e', 'f', 'a', 'c']:
            erreurSaisie()
            input("Appuyez sur la touche 'Entrée' pour retourner au menu des requetes...")      

        else:
            # requete sql en fonction de la saisie
            sql = "select count(Visites.Id_visit) from Visites join Localisations on Visites.Location_city = Localisations.Id where Localisations.Region4 like ? ;"
            # parametre de la requete avec le filtre que l'utilisateur a choisi
            param = (f'{filter}%')
            # execution puis affichage du résultat
            cursor.execute(sql, param)
            for row in cursor.fetchall():
                print (row)
     
            #  REQUETE NUMERO 1 AVEC GRAPHIQUE
            saisie2 = input("Souhaitez-vous comparer avec les valeurs des autres régions en affichant son graphe ? Oui(1) Non(2) : ")
            if saisie2 == "1":
                # requete avec les autres régions
                sql="SELECT COUNT(Visites.Id_visit),Localisations.Region4 FROM Visites JOIN Localisations on Visites.Location_city = Localisations.Id GROUP BY Localisations.Region4;"
                cursor.execute(sql)
                Region=[]
                Effectif=[]
                for row in cursor.fetchall():
                    Region.append(row[0]) 
                    Effectif.append(row [1])

                plt.bar (Effectif, Region) 
                plt.xlabel("Région") 
                plt.ylabel("Effectif")
                plt.title("Graphique du nombre de visites selon leur origine géographiques ")
                plt.show()
        

            # ERREUR DE SAISIE
            if not (saisie2.isdigit() and int(saisie2) in range(1,3)):
                erreurSaisie()

            # Retour aux requetes
            input("Appuyez sur la touche 'Entrée' pour retourner au menu des requetes...")      
            # Effacer la console
            os.system('cls' if os.name == 'nt' else 'clear')     
    




    # REQUETE NUMERO 2
    if saisie == "2":
        # Effacer la console
        os.system('cls' if os.name == 'nt' else 'clear')
            
        print(Fore.GREEN + "2. Le top de la première action fait en principal selon l’origine.\n" + Style.RESET_ALL)

        filter = input("\nDe quelle région voulez vous afficher le nombre de visite ?\nEntrez la première lettre de la région (Espagne - Autre région = (E) / France = (F) / Autre pays = (A) / Comunidad de Madrid = (C)) : ")
        top = int(input("Entrez le nombre de résultats à afficher dans le top : "))
        
        if filter not in ['E', 'F', 'A', 'C', 'e', 'f', 'a', 'c']:
            erreurSaisie()
            input("Appuyez sur la touche 'Entrée' pour retourner au menu des requetes...")          
        
        
        else:
            sql = "SELECT Actions.action, Pages.Type_page FROM Actions  JOIN Pages on Actions.idpage = Pages.Id_page JOIN ActionsVisites on Actions.idaction = ActionsVisites.Id_action JOIN Visites on ActionsVisites.Id_visit = Visites.Id_visit JOIN Localisations on Visites.Location_city = Localisations.Id WHERE Localisations.Region4 LIKE ? GROUP BY Actions.Action, Pages.Type_page,  Localisations.Region4 ORDER BY COUNT(*) DESC LIMIT ?;"
            param = (f'{filter}%')
            # execution avec les parametres saisies
            cursor.execute(sql, param, top)
            for row in cursor.fetchall():
                print (row)

            #  REQUETE NUMERO 2 AVEC GRAPHIQUE
            saisie2 = input("Souhaitez-vous  afficher le graphique associé ? Oui(1) Non(2) : ")

            if saisie2 == "1":
                # graphique de la requete
                sql = "SELECT  Actions.action, COUNT(*)  AS NbActions,Localisations.Region4 FROM Actions  JOIN Pages on Actions.idpage = Pages.Id_page JOIN ActionsVisites on Actions.idaction = ActionsVisites.Id_action JOIN Visites on ActionsVisites.Id_visit = Visites.Id_visit JOIN Localisations on Visites.Location_city = Localisations.Id WHERE Localisations.Region4 LIKE ? GROUP BY Actions.Action, Pages.Type_page,  Localisations.Region4 ORDER BY COUNT(*) DESC LIMIT ?;"
                param = (f'{filter}%', top)
                cursor.execute(sql, param)

                Region = []
                Effectif = []

                for row in cursor.fetchall():
                    Region.append(row[0]) 
                    Effectif.append(row[1])

                plt.bar(Region, Effectif) 
                plt.xlabel("Type d'action") 
                plt.ylabel("Effectif")
                plt.title("Graphique du nombre de visites selon leur origine géographique")
                # Ajoute l'effectif sur les barres
                for i in range(len(Region)):
                    plt.text(Region[i], Effectif[i], str(Effectif[i]), ha='center', va='bottom')

                plt.show()
        
                 

            # ERREUR DE SAISIE
            if not (saisie2.isdigit() and int(saisie2) in range(1,3)):
                erreurSaisie()

            
            input("Appuyez sur la touche 'Entrée' pour retourner au menu des requetes...")      
            # Effacer la console
            os.system('cls' if os.name == 'nt' else 'clear')    
            
            

    # REQUETE NUMERO 3
    if saisie == "3":
        # Effacer la console
        os.system('cls' if os.name == 'nt' else 'clear')
        
        print(Fore.GREEN + "3.  La moyenne du nombre d’actions effectués par visite sur le site selon leur origine.\n" + Style.RESET_ALL)
        
    
        filter = input("\nDe quelle région voulez vous afficher le nombre de visite ?\nEntrez la première lettre de la région (Espagne - Autre région = (E) / France = (F) / Autre pays = (A) / Comunidad de Madrid = (C)) : ")

        if filter not in ['E', 'F', 'A', 'C', 'e', 'f', 'a', 'c']:
            erreurSaisie()
            input("Appuyez sur la touche 'Entrée' pour retourner au menu des requetes...")   

        else:
            sql = "SELECT AVG(nb_actions) AS nbAct FROM ( SELECT Visites.Location_city, COUNT(DISTINCT ActionsVisites.Id_visit) AS nb_actions FROM Visites JOIN ActionsVisites ON Visites.Id_visit = ActionsVisites.Id_visit JOIN Localisations ON Visites.Location_city = Localisations.Id WHERE Localisations.Region4 like ? GROUP BY Visites.Location_city ) AS visit_actions"
            param = (f'{filter}%')
            cursor.execute(sql, param)
            for row in cursor.fetchall():
                print (row)
     
            #  REQUETE NUMERO 3 AVEC GRAPHIQUE
            saisie2 = input("Souhaitez-vous comparer avec les valeurs des autres régions en affichant son graphe ? Oui(1) Non(2) : ")
            if saisie2 == "1":
                sql="SELECT Localisations.Region4, AVG(nb_actions) AS nbAct FROM ( SELECT Visites.Location_city, COUNT(DISTINCT ActionsVisites.Id_action) AS nb_actions FROM Visites JOIN ActionsVisites ON Visites.Id_visit = ActionsVisites.Id_visit JOIN Localisations ON Visites.Location_city = Localisations.Id GROUP BY Visites.Location_city ) AS visit_actions JOIN Localisations ON visit_actions.Location_city = Localisations.Id GROUP BY Localisations.Region4;"
                cursor.execute(sql)
                Region=[]
                NbAct=[]
                for row in cursor.fetchall():
                    Region.append(row[0]) 
                    NbAct.append(row [1])

                plt.bar(Region,NbAct) 
                plt.xlabel("Région") 
                plt.ylabel("Nombre Actions")
                plt.title("Graphique de la moyenne du nombre d'action par visite selon leur origine géographique ")
                plt.show()
        
            # ERREUR DE SAISIE
            if not (saisie2.isdigit() and int(saisie2) in range(1,3)):
                erreurSaisie()
    
            input("Appuyez sur la touche 'Entrée' pour retourner au menu des requetes...")   
            # Effacer la console
            os.system('cls' if os.name == 'nt' else 'clear')  


    # ERREUR DE SAISIE
    if not (saisie.isdigit() and int(saisie) in range(1,5)):
        erreurSaisie()
        input("Appuyez sur la touche 'Entrée' pour continuer...")      
    
    # Effacer la console
    os.system('cls' if os.name == 'nt' else 'clear')

    # affichage des requetes
    requetes()
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
